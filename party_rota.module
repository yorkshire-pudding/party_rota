<?php

/**
 * @file
 * Module for the Rota Entity
 */  


/**
 * Implement hook_entity_info().
 */
function party_rota_entity_info() {
  $info = array();

  $info['rota'] = array(
    'label' => t('Rota'),
    'entity class' => 'Rota',
    'controller class' => 'RotaController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'party_rota',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'rota_id',
    ),
    'bundles' => array(
      'rota' => array(
        'label' => t('Rota'),
        'admin' => array(
          'path' => 'admin/structure/rotas',
          'access arguments' => array('administer rota types'),
        ),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'party_rota_create',
    'access callback' => 'party_rota_access',
    'module' => 'party_rota',
    'admin ui' => array(
      'path' => 'admin/content/rotas',
      'file' => 'party_rota.admin.inc',
      'controller class' => 'RotaUIController',
      'menu wildcard' => '%rota',
    ),
  );

  $info['rota_slot'] = array(
    'label' => t('Slot'),
    'entity class' => 'Slot',
    'controller class' => 'SlotController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'party_rota_slot',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'slot_id',
    ),
    'bundles' => array(
      'slot' => array(
        'label' => t('Slot'),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'party_rota_slot_create',
    'access callback' => 'party_rota_slot_access',
    'module' => 'party_rota',
  );

  $info['rota_position'] = array(
    'label' => t('Position'),
    'entity class' => 'Position',
    'controller class' => 'PositionController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'party_rota_position',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'position_id',
    ),
    'bundles' => array(
      'position' => array(
        'label' => t('Position'),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'party_rota_position_create',
    'access callback' => 'party_rota_position_access',
    'module' => 'party_rota',
  );

  $info['rota_assignment'] = array(
    'label' => t('Assignment'),
    'entity class' => 'Assignment',
    'controller class' => 'AssignmentController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'party_rota_assignment',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'assignment_id',
    ),
    'bundles' => array(
      'assignment' => array(
        'label' => t('Assignment'),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'party_rota_assignment_create',
    'access callback' => 'party_rota_assignment_access',
    'module' => 'party_rota',
  );

  return $info;
}

/**
 * Implements hook_menu().
 */
function party_rota_menu() {
  $items['admin/party_rota/%ctools_js/assign/%rota_position/%rota_slot'] = array(
    'title' => 'Add Assignment',
    'page callback' => 'party_rota_inline_ajax_assign',
    'page arguments' => array(2,4,5),
    'access callback' => TRUE,
    'file' => 'party_rota.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/party_rota/%ctools_js/add/%rota/%'] = array(
    'title' => 'Add Entity to Rota',
    'page callback' => 'party_rota_inline_ajax_add',
    'page arguments' => array(2,4,5),
    'access callback' => TRUE,
    'file' => 'party_rota.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/party_rota/%ctools_js/%/%/edit'] = array(
    'title' => 'Edit Rota Entity',
    'page callback' => 'party_rota_inline_ajax_edit',
    'page arguments' => array(2,3,4),
    'access callback' => TRUE,
    'file' => 'party_rota.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/party_rota/%ctools_js/%/%/delete'] = array(
    'title' => 'Delete Rota Entity',
    'page callback' => 'party_rota_inline_ajax_delete',
    'page arguments' => array(2,3,4),
    'access callback' => TRUE,
    'file' => 'party_rota.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/party_rota/%ctools_js/delete/%rota_assignment'] = array(
    'title' => 'Delete Assignment',
    'page callback' => 'party_rota_inline_ajax_delete_assignment',
    'page arguments' => array(2,4),
    'access callback' => TRUE,
    'file' => 'party_rota.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function party_rota_permission() {
  $permissions = array(
    'administer rotas' => array(
      'title' => t('Administer rotas'),
      'description' => t('Edit and delete all rotas'),
    ),
    'administer slots' => array(
      'title' => t('Administer slots'),
      'description' => t('Edit and delete all slots'),
    ),
    'administer positions' => array(
      'title' => t('Administer positions'),
      'description' => t('Edit and delete all positions'),
    ),
    'administer assignments' => array(
      'title' => t('Administer assignments'),
      'description' => t('Edit and delete all assignments'),
    ),
  );
  
  return $permissions;  
}


/**
 * Determines whether the given user has access to a rota.
 */
function party_rota_access($op, $rota = NULL, $account = NULL) {
  if (user_access('administer rotas', $account)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Determines whether the given user has access to a rota slot.
 */
function party_rota_slot_access($op, $rota = NULL, $account = NULL) {
  if (user_access('administer slots', $account)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Determines whether the given user has access to a rota position.
 */
function party_rota_position_access($op, $rota = NULL, $account = NULL) {
  if (user_access('administer positions', $account)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Determines whether the given user has access to a rota assignment.
 */
function party_rota_assignment_access($op, $rota = NULL, $account = NULL) {
  if (user_access('administer assignments', $account)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Fetch a rota object.
 *
 * @param $rota_id
 *   Integer specifying the rota id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $rota object or FALSE if it cannot be loaded.
 *
 * @see rota_load_multiple()
 */
function rota_load($rota_id, $reset = FALSE) {
  $rotas = rota_load_multiple(array($rota_id), array(), $reset);
  return reset($rotas);
}

/**
 * Fetch a slot object.
 *
 * @param $slot_id
 *   Integer specifying the slot id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $slot object or FALSE if it cannot be loaded.
 *
 * @see rota_slot_load_multiple()
 */
function rota_slot_load($slot_id, $reset = FALSE) {
  $slots = rota_slot_load_multiple(array($slot_id), array(), $reset);
  return reset($slots);
}

/**
 * Fetch a position object.
 *
 * @param $position_id
 *   Integer specifying the position id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $position object or FALSE if it cannot be loaded.
 *
 * @see rota_position_load_multiple()
 */
function rota_position_load($position_id, $reset = FALSE) {
  $positions = rota_position_load_multiple(array($position_id), array(), $reset);
  return reset($positions);
}

/**
 * Fetch a assignment object.
 *
 * @param $assignment_id
 *   Integer specifying the assignment id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $assignment object or FALSE if it cannot be loaded.
 *
 * @see rota_assignment_load_multiple()
 */
function rota_assignment_load($assignment_id, $reset = FALSE) {
  $assignments = rota_assignment_load_multiple(array($assignment_id), array(), $reset);
  return reset($assignments);
}

/**
 * Load multiple rotas based on certain conditions.
 *
 * @param $rota_ids
 *   An array of rota IDs.
 * @param $conditions
 *   An array of conditions to match against the {party_rota} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of rota objects, indexed by rota_id.
 *
 * @see entity_load()
 * @see rota_load()
 */
function rota_load_multiple($rota_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('rota', $rota_ids, $conditions, $reset);
}

/**
 * Load multiple slots based on certain conditions.
 *
 * @param $slot_ids
 *   An array of slot IDs.
 * @param $conditions
 *   An array of conditions to match against the {party_rota_slot} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of slot objects, indexed by slot_id.
 *
 * @see entity_load()
 * @see rota_slot_load()
 */
function rota_slot_load_multiple($slot_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('rota_slot', $slot_ids, $conditions, $reset);
}

/**
 * Load multiple positions based on certain conditions.
 *
 * @param $position_ids
 *   An array of position IDs.
 * @param $conditions
 *   An array of conditions to match against the {party_rota_position} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of position objects, indexed by position_id.
 *
 * @see entity_load()
 * @see rota_position_load()
 */
function rota_position_load_multiple($position_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('rota_position', $position_ids, $conditions, $reset);
}

/**
 * Load multiple assignments based on certain conditions.
 *
 * @param $assignment_ids
 *   An array of assignment IDs.
 * @param $conditions
 *   An array of conditions to match against the {party_rota_assignment} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of assignment objects, indexed by assignment_id.
 *
 * @see entity_load()
 * @see rota_assignment_load()
 */
function rota_assignment_load_multiple($assignment_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('rota_assignment', $assignment_ids, $conditions, $reset);
}

/**
 * Deletes a rota.
 */
function party_rota_delete(Rota $rota) {
  $rota->delete();
}


/**
 * Delete multiple rotas.
 *
 * @param $rota_ids
 *   An array of rota IDs.
 */
function party_rota_delete_multiple(array $rota_ids) {
  entity_get_controller('rota')->delete($rota_ids);
}


/**
 * Create a rota object.
 *
 * @param array $values
 *   A list of values used to create the rota object.
 */
function party_rota_create($values = array()) {
  return entity_get_controller('rota')->create($values);
}

/**
 * Create a rota_slot object.
 *
 * @param array $values
 *   A list of values used to create the rota_slot object.
 */
function party_rota_slot_create($values = array()) {
  return entity_get_controller('rota_slot')->create($values);
}

/**
 * Create a rota_position object.
 *
 * @param array $values
 *   A list of values used to create the rota_position object.
 */
function party_rota_position_create($values = array()) {
  return entity_get_controller('rota_position')->create($values);
}

/**
 * Create a rota_assignment object.
 *
 * @param array $values
 *   A list of values used to create the rota_assignment object.
 */
function party_rota_assignment_create($values = array()) {
  return entity_get_controller('rota_assignment')->create($values);
}


/**
 * Saves a rota to the database.
 *
 * @param $rota
 *   The rota object.
 */
function party_rota_save(Rota $rota) {
  return $rota->save();
}

/**
 * URI callback for rotas
 */
function party_rota_uri(Rota $rota){
  return array(
    'path' => 'rota/' . $rota->rota_id,
  );
}


/**
 * Menu title callback for showing individual rotas
 */
function party_rota_page_title(Rota $rota){
  return $rota->name;
}


/**
 * Sets up content to show an individual rota
 * @todo - get rid of drupal_set_title();
 */
function party_rota_page_view($rota, $view_mode = 'full') {    
  $controller = entity_get_controller('rota');  
  $content = $controller->view(array($rota->rota_id => $rota));
  drupal_set_title($rota->name);

  return $content;
}

/**
 * Implements hook_theme().
 */
function party_rota_theme() {
  return array(
    'party_rota' => array(
      'render element' => 'elements',
      'template' => 'rota',
    ),
    'party_rota_slot' => array(
      'variables' => array('entity' => NULL),
      'template' => 'party-rota-slot',
    ),
    'party_rota_position' => array(
      'variables' => array('entity' => NULL),
      'template' => 'party-rota-position',
    ),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function party_rota_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/rotas/add' on 'admin/structure/rotas'.
  if ($root_path == 'admin/content/rotas') {
    $item = menu_get_item('admin/content/rotas/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Fetches a list of slots attached to a Rota.
 *
 * @param Rota $rota
 *   Rota object to query.
 *
 * @return
 *   An array of fully loaded Slot objects keyed by slot_id.
 */
function party_rota_get_slots_from_rota(Rota $rota) {
  $result = db_select('party_rota_slot', 's')
    ->fields('s')
    ->condition('rota_id', $rota->rota_id, '=')
    ->orderBy('date', 'ASC')//ORDER BY created
    ->execute()
    ->fetchAll();

  if ($result) {
    $slots = array();

      foreach ($result as $data) {
        $slots[$data->slot_id] = rota_slot_load($data->slot_id);
      }

    return $slots;
  }

  return FALSE;
}

/**
 * Fetches a list of positions attached to a Rota.
 *
 * @param Rota $rota
 *   Rota object to query.
 *
 * @return
 *   An array of fully loaded Position objects keyed by position_id.
 */
function party_rota_get_positions_from_rota(Rota $rota) {
  $result = db_select('party_rota_position', 'p')
    ->fields('p')
    ->condition('rota_id', $rota->rota_id, '=')
    ->execute()
    ->fetchAll();

  if (isset($result)) {
    $positions = array();

    foreach ($result as $data) {
      $positions[$data->position_id] = rota_position_load($data->position_id);
    }

    return $positions;
  }

  return FALSE;
}

/**
 * Fetches a list of assignments attached to a Rota.
 *
 * @param Rota $rota
 *   Rota object to query.
 *
 * @return
 *   An array of fully loaded Assignment objects keyed by assignment_id.
 */
function party_rota_get_assignments_from_rota(Rota $rota) {
  $result = db_select('party_rota_assignment', 'a')
    ->fields('a')
    ->condition('rota_id', $rota->rota_id, '=')
    ->execute()
    ->fetchAll();

  if (isset($result)) {
    $assignments = array();

    foreach ($result as $data) {
      $assignments[$data->assignment_id] = rota_assignment_load($data->assignment_id);
    }

    return $assignments;
  }

  return FALSE;
}

/**
 * Fetches a list of parties assigned to a Rota.
 *
 * @param Rota $rota
 *   Rota object to query.
 *
 * @return
 *   An array of fully loaded Party objects keyed by pid.
 */
function party_rota_get_parties_from_rota(Rota $rota) {
  $result = db_select('field_data_party_rota_parties', 'p')
    ->fields('p')
    ->condition('entity_type', 'rota', '=')
    ->condition('entity_id', $rota->rota_id, '=')
    ->execute()
    ->fetchAll();

  if (isset($result)) {
    $parties = array();

    foreach ($result as $data) {
      $parties[$data->party_rota_parties_target_id] = party_load($data->party_rota_parties_target_id);
    }

    return $parties;
  }

  return FALSE;
}

/**
 * Fetches a list of party assignments attached to a Rota,
 *   and creates new assignments for parties that are not already assigned.
 *
 * @param array $parties
 *   An array of parties of which the keys are the pids.
 * @param Rota $rota
 *   Rota object to query.
 *
 * @return
 *   An array of fully loaded Assignment objects keyed by assignment_id.
 */
function party_rota_get_assignments_from_parties($parties, Rota $rota) {
  $assignments = array();

  foreach ($parties as $pid => $party) {
    $result = db_select('party_rota_assignment', 'a')
      ->fields('a')
      ->condition('rota_id', $rota->rota_id, '=')
      ->condition('party_id', $pid, '=')
      ->condition('position_id', 0, '=')
      ->condition('slot_id', 0, '=')
      ->execute()
      ->fetchAll();

    if (!empty($result)) {
      $result = reset($result);

      $assignments[$result->assignment_id] = entity_load_single('rota_assignment', $result->assignment_id);

    }
    else {
      $values = array(
        'name' => $party->label,
        'party_id' => $party->pid,
        'rota_id' => $rota->rota_id,
      );
      $assignment = party_rota_assignment_create($values);
      $assignment->save();
      $assignments[$assignment->assignment_id] = $assignment;
    }

  }

  return $assignments;
}

/**
 * Fetches a specific Assignment from its context in a Rota.
 *
 * @param Rota $rota
 *   Rota object to query.
 * @param integer $position_id
 *   The position id of the assignment to be loaded.
 * @param integer $slot_id
 *   The slot id of the assignment to be loaded.
 *
 * @return
 *   A query result object with all Assignment values keyed by assignment_id.
 */
function party_rota_get_assignment_from_context(Rota $rota, $position_id, $slot_id) {
  $result = db_select('party_rota_assignment', 'a')
    ->fields('a')
    ->condition('rota_id', $rota->rota_id, '=')
    ->condition('position_id', $position_id, '=')
    ->condition('slot_id', $slot_id, '=')
    ->execute()
    ->fetchAll();

  if (isset($result)) {
    return reset($result);
  }

  return FALSE;
}

/**
 * Implements hook_views_api().
 */
function party_rota_views_api() {
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'party_rota') . '/views',
  );
}

function party_rota_form_alter(&$form, &$form_state, $form_id) {
  //dpm($form);
}