<?php

/**
 * @file
 * Module for the Model Entity - a starting point to create your own Entity
 * and associated administration interface
 */  


/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function party_rota_entity_info() {
  $info = array();

  $info['rota'] = array(
    'label' => t('Rota'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'Rota',
    'controller class' => 'RotaController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'party_rota',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'rota_id',
    ),
    // Bundles are defined by the model types below
    'bundles' => array(
      'rota' => array(
        'label' => t('Rota'),
        'admin' => array(
          'path' => 'admin/structure/rotas',
          //'real path' => 'admin/structure/rotas',
          'access arguments' => array('administer rota types'),
        ),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'party_rota_create',
    'access callback' => 'party_rota_access',
    'module' => 'party_rota',
    // The information below is used by the ModelUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/rotas',
      'file' => 'party_rota.admin.inc',
      'controller class' => 'RotaUIController',
      'menu wildcard' => '%rota',
    ),
    //'load hook' => 'party_rota_load',
  );

  $info['rota_slot'] = array(
    'label' => t('Slot'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'Slot',
    'controller class' => 'SlotController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'party_rota_slot',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'slot_id',
    ),
    // Bundles are defined by the model types below
    'bundles' => array(
      'slot' => array(
        'label' => t('Slot'),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'party_rota_slot_create',
    'access callback' => 'party_rota_slot_access',
    'module' => 'party_rota',
    // The information below is used by the ModelUIController (which extends the EntityDefaultUIController)
    //'load hook' => 'party_rota_slot_load',
  );

  $info['rota_position'] = array(
    'label' => t('Position'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'Position',
    'controller class' => 'PositionController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'party_rota_position',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'position_id',
    ),
    // Bundles are defined by the model types below
    'bundles' => array(
      'position' => array(
        'label' => t('Position'),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'party_rota_position_create',
    'access callback' => 'party_rota_position_access',
    'module' => 'party_rota',
    // The information below is used by the ModelUIController (which extends the EntityDefaultUIController)
    //'load hook' => 'party_rota_position_load',
  );

  $info['rota_assignment'] = array(
    'label' => t('Assignment'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'Assignment',
    'controller class' => 'AssignmentController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'party_rota_assignment',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'assignment_id',
    ),
    // Bundles are defined by the model types below
    'bundles' => array(
      'assignment' => array(
        'label' => t('Assignment'),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'party_rota_assignment_create',
    'access callback' => 'party_rota_assignment_access',
    'module' => 'party_rota',
    // The information below is used by the ModelUIController (which extends the EntityDefaultUIController)
    //'load hook' => 'party_rota_assignment_load',
  );

  return $info;
}

/**
 * Implements hook_menu().
 */
function party_rota_menu() {
  $items['admin/party_rota/%ctools_js/add/%rota_position/%rota_slot'] = array(
    'title' => 'Add Assignment',
    'page callback' => 'party_rota_inline_ajax_add',
    'page arguments' => array(2,4,5),
    'access callback' => TRUE,
    'file' => 'party_rota.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/party_rota/%ctools_js/delete/%rota_assignment'] = array(
    'title' => 'Delete Assignment',
    'page callback' => 'party_rota_inline_ajax_delete',
    'page arguments' => array(2,4),
    'access callback' => TRUE,
    'file' => 'party_rota.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function party_rota_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    /*'administer rota types' => array(
      'title' => t('Administer rota types'),
      'description' => t('Create and delete fields for rota types, and set their permissions.'),
    ),*/
    'administer rotas' => array(
      'title' => t('Administer rotas'),
      'description' => t('Edit and delete all rotas'),
    ),
    'administer slots' => array(
      'title' => t('Administer slots'),
      'description' => t('Edit and delete all slots'),
    ),
    'administer positions' => array(
      'title' => t('Administer positions'),
      'description' => t('Edit and delete all positions'),
    ),
    'administer assignments' => array(
      'title' => t('Administer assignments'),
      'description' => t('Edit and delete all assignments'),
    ),
  );
  
  return $permissions;  
}


/**
 * Determines whether the given user has access to a model.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $model
 *   Optionally a model or a model type to check access for. If nothing is
 *   given, access for all models is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function party_rota_access($op, $rota = NULL, $account = NULL) {
  if (user_access('administer rotas', $account)) {
    return TRUE;
  }

  return FALSE;
}

function party_rota_slot_access($op, $rota = NULL, $account = NULL) {
  if (user_access('administer slots', $account)) {
    return TRUE;
  }

  return FALSE;
}

function party_rota_position_access($op, $rota = NULL, $account = NULL) {
  if (user_access('administer positions', $account)) {
    return TRUE;
  }

  return FALSE;
}

function party_rota_assignment_access($op, $rota = NULL, $account = NULL) {
  if (user_access('administer assignments', $account)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Fetch a model object. Make sure that the wildcard you choose 
 * in the model entity definition fits the function name here.
 *
 * @param $model_id
 *   Integer specifying the model id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $model object or FALSE if it cannot be loaded.
 *
 * @see model_load_multiple()
 */
function rota_load($rota_id, $reset = FALSE) {
  $rotas = rota_load_multiple(array($rota_id), array(), $reset);
  return reset($rotas);
}

function rota_slot_load($slot_id, $reset = FALSE) {
  $slots = rota_slot_load_multiple(array($slot_id), array(), $reset);
  return reset($slots);
}

function rota_position_load($position_id, $reset = FALSE) {
  $positions = rota_position_load_multiple(array($position_id), array(), $reset);
  return reset($positions);
}

function rota_assignment_load($assignment_id, $reset = FALSE) {
  $assignments = rota_assignment_load_multiple(array($assignment_id), array(), $reset);
  return reset($assignments);
}

/**
 * Load multiple models based on certain conditions.
 *
 * @param $model_ids
 *   An array of model IDs.
 * @param $conditions
 *   An array of conditions to match against the {model} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of model objects, indexed by model_id.
 *
 * @see entity_load()
 * @see model_load()
 */
function rota_load_multiple($rota_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('rota', $rota_ids, $conditions, $reset);
}

function rota_slot_load_multiple($slot_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('rota_slot', $slot_ids, $conditions, $reset);
}

function rota_position_load_multiple($position_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('rota_position', $position_ids, $conditions, $reset);
}

function rota_assignment_load_multiple($assignment_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('rota_assignment', $assignment_ids, $conditions, $reset);
}

/**
 * Deletes a model.
 */
function party_rota_delete(Rota $rota) {
  $rota->delete();
}


/**
 * Delete multiple models.
 *
 * @param $model_ids
 *   An array of model IDs.
 */
function party_rota_delete_multiple(array $rota_ids) {
  entity_get_controller('rota')->delete($rota_ids);
}


/**
 * Create a rota object.
 */
function party_rota_create($values = array()) {
  return entity_get_controller('rota')->create($values);
}

/**
 * Create a rota_slot object.
 *
 * @param array $values
 *   A list of values used to create the rota_slot object.
 */
function party_rota_slot_create($values = array()) {
  return entity_get_controller('rota_slot')->create($values);
}

/**
 * Create a rota_position object.
 *
 * @param array $values
 *   A list of values used to create the rota_position object.
 */
function party_rota_position_create($values = array()) {
  return entity_get_controller('rota_position')->create($values);
}

/**
 * Create a rota_assignment object.
 *
 * @param array $values
 *   A list of values used to create the rota_assignment object.
 */
function party_rota_assignment_create($values = array()) {
  return entity_get_controller('rota_assignment')->create($values);
}


/**
 * Saves a model to the database.
 *
 * @param $model
 *   The model object.
 */
function party_rota_save(Rota $rota) {
  return $rota->save();
}

/**
 * URI callback for models
 */
function party_rota_uri(Rota $rota){
  return array(
    'path' => 'rota/' . $rota->rota_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function party_rota_page_title(Rota $rota){
  return $rota->name;
}


/**
 * Sets up content to show an individual model
 * @todo - get rid of drupal_set_title();
 */
function party_rota_page_view($rota, $view_mode = 'full') {    
  $controller = entity_get_controller('rota');  
  $content = $controller->view(array($rota->rota_id => $rota));
  drupal_set_title($rota->name);

  return $content;
}

/**
 * Implement hook_theme().
 */
function party_rota_theme() {
  return array(
    'party_rota_dock' => array(
      'render element' => 'element',
    ),
    'party_rota_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'party_rota.admin.inc',
    ),
    'party_rota' => array(
      'render element' => 'elements',
      'template' => 'rota',
    ),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function party_rota_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/models/add' on 'admin/structure/models'.
  if ($root_path == 'admin/content/rotas') {
    $item = menu_get_item('admin/content/rotas/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 *
 */
function party_rota_element_info() {
  $types = array();

  $types['party_rota_dock'] = array(
    '#input' => TRUE,
    '#js_select' => TRUE,
    '#multiple' => TRUE,
    '#options' => array(),
    '#empty' => '',
    '#element_validate' => array('party_rota_dock_element_validate'),
    '#process' => array('party_rota_dock_element_process'),
    //'#autocomplete_path' => FALSE,
    '#theme' => 'party_rota_dock',
    '#element' => 'blah',
    //'#theme_wrappers' => array('form_element'),
    //'#maxlength' => 16,
  );

  return $types;
}

/**
 *
 */
function party_rota_dock_element_validate($element) {}

/**
 *
 */
function party_rota_dock_element_process($element) {

    if ($element['#multiple']) {
    $value = is_array($element['#value']) ? $element['#value'] : array();
  }
  else {
    // Advanced selection behavior makes no sense for radios.
    $element['#js_select'] = FALSE;
  }

  $element['#tree'] = TRUE;

  if (count($element['#options']) > 0) {
    if (!isset($element['#default_value']) || $element['#default_value'] === 0) {
      $element['#default_value'] = array();
    }

    // Create a checkbox or radio for each item in #options in such a way that
    // the value of the tableselect element behaves as if it had been of type
    // checkboxes or radios.
    foreach ($element['#options'] as $key => $choice) {
      // Do not overwrite manually created children.
      if (!isset($element[$key])) {
        if ($element['#multiple']) {
          $title = '';
          if (!empty($element['#options'][$key]['title']['data']['#title'])) {
            $title = t('Update @title', array(
              '@title' => $element['#options'][$key]['title']['data']['#title'],
            ));
          }
          $element[$key] = array(
            '#type' => 'checkbox',
            '#title' => $title,
            '#title_display' => 'invisible',
            '#return_value' => $key,
            '#default_value' => isset($value[$key]) ? $key : NULL,
            '#attributes' => $element['#attributes'],
          );
        }
        else {
          // Generate the parents as the autogenerator does, so we will have a
          // unique id for each radio button.
          $parents_for_id = array_merge($element['#parents'], array($key));
          $element[$key] = array(
            '#type' => 'radio',
            '#title' => '',
            '#return_value' => $key,
            '#default_value' => ($element['#default_value'] == $key) ? $key : NULL,
            '#attributes' => $element['#attributes'],
            '#parents' => $element['#parents'],
            '#id' => drupal_html_id('edit-' . implode('-', $parents_for_id)),
            '#ajax' => isset($element['#ajax']) ? $element['#ajax'] : NULL,
          );
        }
        if (isset($element['#options'][$key]['#weight'])) {
          $element[$key]['#weight'] = $element['#options'][$key]['#weight'];
        }
      }
    }
  }
  else {
    $element['#value'] = array();
  }
  return $element;
}

function theme_party_rota_dock($variables) {

 $element = $variables['element'];
  $rows = array();
  $header = $element['#header'];
  if (!empty($element['#options'])) {
    // Generate a table row for each selectable item in #options.
    foreach (element_children($element) as $key) {
      $row = array();

      $row['data'] = array();
      if (isset($element['#options'][$key]['#attributes'])) {
        $row += $element['#options'][$key]['#attributes'];
      }
      // Render the checkbox / radio element.
      $row['data'][] = drupal_render($element[$key]);

      // As theme_table only maps header and row columns by order, create the
      // correct order by iterating over the header fields.
      foreach ($element['#header'] as $fieldname => $title) {
        $row['data'][] = $element['#options'][$key][$fieldname];
      }
      $rows[] = $row;
    }
    // Add an empty header or a "Select all" checkbox to provide room for the
    // checkboxes/radios in the first table column.
    if ($element['#js_select']) {
      // Add a "Select all" checkbox.
      drupal_add_js('misc/tableselect.js');
      array_unshift($header, array('class' => array('select-all')));
    }
    else {
      // Add an empty header when radio buttons are displayed or a "Select all"
      // checkbox is not desired.
      array_unshift($header, '');
    }
  }
  return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => $element['#empty'], 'attributes' => $element['#attributes']));

}

function party_rota_get_slots_from_rota(Rota $rota) {
  $result = db_select('party_rota_slot', 's')
    ->fields('s')
    ->condition('rota_id', $rota->rota_id, '=')
    ->orderBy('date', 'ASC')//ORDER BY created
    ->execute()
    ->fetchAll();

  if ($result) {
    $slots = array();

      foreach ($result as $data) {
        $slots[$data->slot_id] = rota_slot_load($data->slot_id);
      }

    return $slots;
  }

  return FALSE;
}

function party_rota_get_positions_from_rota(Rota $rota) {
  $result = db_select('party_rota_position', 'p')
    ->fields('p')
    ->condition('rota_id', $rota->rota_id, '=')
    ->execute()
    ->fetchAll();

  if (isset($result)) {
    $positions = array();

    foreach ($result as $data) {
      $positions[$data->position_id] = rota_position_load($data->position_id);
    }

    return $positions;
  }

  return FALSE;
}

function party_rota_get_assignments_from_rota(Rota $rota) {
  $result = db_select('party_rota_assignment', 'a')
    ->fields('a')
    ->condition('rota_id', $rota->rota_id, '=')
    ->execute()
    ->fetchAll();

  if (isset($result)) {
    $assignments = array();

    foreach ($result as $data) {
      $assignments[$data->assignment_id] = rota_assignment_load($data->assignment_id);
    }

    return $assignments;
  }

  return FALSE;
}

function party_rota_get_parties_from_rota(Rota $rota) {
  $result = db_select('field_data_party_rota_parties', 'p')
    ->fields('p')
    ->condition('entity_type', 'rota', '=')
    ->condition('entity_id', $rota->rota_id, '=')
    ->execute()
    ->fetchAll();

  if (isset($result)) {
    $parties = array();

    foreach ($result as $data) {
      $parties[$data->party_rota_parties_target_id] = party_load($data->party_rota_parties_target_id);
    }

    return $parties;
  }

  return FALSE;
}

function party_rota_get_assignments_from_parties($parties, Rota $rota) {
  $assignments = array();

  foreach ($parties as $pid => $party) {
    $result = db_select('party_rota_assignment', 'a')
      ->fields('a')
      ->condition('rota_id', $rota->rota_id, '=')
      ->condition('party_id', $pid, '=')
      ->condition('position_id', 0, '=')
      ->condition('slot_id', 0, '=')
      ->execute()
      ->fetchAll();

    if (!empty($result)) {
      $result = reset($result);

      $assignments[$result->assignment_id] = entity_load_single('rota_assignment', $result->assignment_id);

    }
    else {
      $values = array(
        'name' => $party->label,
        'party_id' => $party->pid,
        'rota_id' => $rota->rota_id,
      );
      $assignment = party_rota_assignment_create($values);
      $assignment->save();
      $assignments[$assignment->assignment_id] = $assignment;
    }

  }

  return $assignments;
}


function party_rota_get_assignment_from_context(Rota $rota, $position_id, $slot_id) {
  $result = db_select('party_rota_assignment', 'a')
    ->fields('a')
    ->condition('rota_id', $rota->rota_id, '=')
    ->condition('position_id', $position_id, '=')
    ->condition('slot_id', $slot_id, '=')
    ->execute()
    ->fetchAll();

  if (isset($result)) {
    return reset($result);
  }

  return FALSE;
}

function party_rota_get_pids_from_assignments($assignments) {
  $pids = array();

  foreach ($assignments as $assignment) {
    $pids[] = $assignment->party_id;
  }

  return $pids;
}

/**
 * Implements hook_views_api().
 */
function party_rota_views_api() {
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'party_rota') . '/views',
  );
}

