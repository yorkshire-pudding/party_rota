<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 */


/**
 * Implements hook_schema().
 */
function party_rota_schema() {
  $schema = array();

  $schema['party_rota'] = array(
    'description' => 'The base table for rota entities.',
    'fields' => array(
      'rota_id' => array(
        'description' => 'Primary Key: Identifier for a rota.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'language' => array(
        'description' => 'The language of the rota.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The name of the rota - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the rota was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the rota was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('rota_id'),
  );

  $schema['party_rota_slot'] = array(
    'description' => 'The base table for rota entities.',
    'fields' => array(
      'slot_id' => array(
        'description' => 'Primary Key: Identifier for a slot.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'rota_id' => array(
        'description' => 'The unique identifier of the rota this slot is attached to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'language' => array(
        'description' => 'The language of the slot.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The name of the slot - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'The description of the slot.',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'date' => array(
        'description' => 'The Unix timestamp when the slot will occur.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the slot was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the slot was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('slot_id'),
  );

  $schema['party_rota_position'] = array(
    'description' => 'The base table for rota entities.',
    'fields' => array(
      'position_id' => array(
        'description' => 'Primary Key: Identifier for a position.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'rota_id' => array(
        'description' => 'The unique identifier of the rota this position is attached to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'language' => array(
        'description' => 'The language of the position.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The name of the position - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'The description of the position.',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the position was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the position was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('position_id'),
  );

  $schema['party_rota_assignment'] = array(
    'description' => 'The base table for rota entities.',
    'fields' => array(
      'assignment_id' => array(
        'description' => 'Primary Key: Identifier for a assignment.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'rota_id' => array(
        'description' => 'The unique identifier of the rota this assignment is attached to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'party_id' => array(
        'description' => 'The unique identifier of the party this assignment is attached to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'position_id' => array(
        'description' => 'The unique identifier of the position this assignment is attached to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'slot_id' => array(
        'description' => 'The unique identifier of the slot this assignment is attached to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'language' => array(
        'description' => 'The language of the assignment.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The name of the assignment - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the assignment was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the assignment was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('assignment_id'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function party_rota_install() {
  $t = get_t();

  if (!field_info_field('party_rota_parties')) {
    $field = array(
      'field_name' => 'party_rota_parties',
      'type' => 'entityreference',
      'cardinality' => -1,
      'settings' => array(
        'target_type' => 'party',
        'handler' => 'base',
        'handler_settings' => array(
          'target_hats' => array(
            'party_indiv' => 'party_indiv',
          ),
        ),
      ),
    );

    field_create_field($field);
  }

  if (!field_info_instance('rota', 'party_rota_parties', 'rota')) {
    $instance = array(
      'label' => $t('Rota Parties'),
      'description' => $t('Parties that are able to be assigned to this Rota.'),
      'field_name' => 'party_rota_parties',
      'entity_type' => 'rota',
      'bundle' => 'rota',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
    );
    field_create_instance($instance);
  }
}